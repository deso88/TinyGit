import io.bit3.jsass.Compiler
import io.bit3.jsass.Options
import io.bit3.jsass.OutputStyle

import java.nio.charset.StandardCharsets
import java.nio.file.Files
import java.nio.file.Paths

buildscript {
  ext {
    kotlinVersion = "1.2.70"
    springBootVersion = "2.0.3.RELEASE"
  }
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
    classpath "org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}"
    classpath "io.bit3:jsass:5.7.3"
  }
}

apply plugin: "kotlin"
apply plugin: "kotlin-spring"
apply plugin: "eclipse"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"

group = "hamburg.remme"
version = "0.0.1-SNAPSHOT"
sourceCompatibility = 1.8

compileKotlin {
  kotlinOptions {
    freeCompilerArgs = ["-Xjsr305=strict"]
    jvmTarget = "1.8"
  }
}

compileTestKotlin {
  kotlinOptions {
    freeCompilerArgs = ["-Xjsr305=strict"]
    jvmTarget = "1.8"
  }
}

repositories {
  mavenCentral()
}

dependencies {
  compile "org.springframework.boot:spring-boot-starter"
  compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
  compile "org.jetbrains.kotlin:kotlin-reflect"
  testCompile "org.springframework.boot:spring-boot-starter-test"
  testCompile "org.junit.platform:junit-platform-engine:1.0.3"
  testCompile "org.junit.jupiter:junit-jupiter-api:5.0.3"
  testCompile "org.junit.jupiter:junit-jupiter-params:5.0.3"
  testCompile "org.testfx:testfx-core:4.0.13-alpha"
  testCompile "org.testfx:testfx-junit5:4.0.13-alpha"
}

void parseSASS(inputPath, outputPath) {
  def compiler = new Compiler()
  def options = new Options()
  options.outputStyle = OutputStyle.COMPRESSED
  options.sourceComments = false

  def inputFile = file(inputPath).toURI()
  def outputFile = file(outputPath).toURI()

  def output = compiler.compileFile(inputFile, outputFile, options)
  // Has to be removed for JavaFX
  def css = output.getCss().replace("@charset \"UTF-8\";", "")

  def target = Paths.get(outputFile)
  Files.createDirectories(target.parent)
  Files.write(target, css.getBytes(StandardCharsets.UTF_8))
}

task compileSASS {
  def inputPath = "src/main/resources/sass/main.sass"
  def outputPath = "src/main/resources/generated/main.css"
  parseSASS(inputPath, outputPath)
}

assemble.doLast {
  compileSASS
}
